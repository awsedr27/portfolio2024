<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.portfolio.order.dao.OrderItemsDao">
    <update id="updateOrderItemsForCancelByOrderId" parameterType="com.portfolio.order.dto.OrderDto$OrderItemsCancelByOrderIdQuery">
	    UPDATE orderItems
		SET
		status='CANCELLED'
		WHERE
	    order_id = #{orderId};
    </update>
    <select id="selectOrderItem" parameterType="Int" resultType="com.portfolio.order.dto.OrderDto$OrderItemDto">
        SELECT
			order_item_id,
			order_id,
			product_id,
			quantity,
			price,
			status,
			create_date,
			modify_date
        FROM orderItems
        WHERE order_item_id=#{orderItemId}
    </select>
    <select id="selectOrderItemsWithExclusiveLockByOrderId" parameterType="Int" resultType="com.portfolio.order.dto.OrderDto$OrderItemDto">
        SELECT
			order_item_id,
			order_id,
			product_id,
			quantity,
			price,
			status,
			create_date,
			modify_date
        FROM orderItems
        WHERE order_id=#{orderId}
        ORDER BY order_item_id ASC
        FOR UPDATE
    </select>
    <update id="updateOrderItemForCancel" parameterType="com.portfolio.order.dto.OrderDto$OrderItemCancelQuery">
	    UPDATE orderItems
		SET
		status='CANCELLED'
		WHERE
	    order_item_id = #{orderItemId};
    </update>
	<insert id="insertOrderItemsList" parameterType="com.portfolio.order.dto.OrderDto$OrderItemsSaveQuery">
	    INSERT INTO orderItems (
	        order_id,
	        status,
	        product_id,
	        quantity,
	        price
	    ) VALUES
	    <foreach collection="orderItems" item="item" separator=",">
	        (#{orderId}, #{status}, #{item.productId}, #{item.quantity}, #{item.price})
	    </foreach>
	</insert>
    <select id="selectMyPageReviewList" parameterType="com.portfolio.order.dto.OrderDto$MyPageReviewListQuery" resultType="com.portfolio.order.dto.OrderDto$MyPageReviewListResult">
		SELECT 
		 CONCAT(f.file_id, '.', f.file_type) AS imageUrl,
		 p.name AS productName,
		 oi.quantity AS quantity,
		 oi.price AS price,
		 r.review_id AS reviewId,
		 r.use_yn AS reviewUseYn,
		 r.rating AS reviewRating,
		 r.comment AS reviewComment,
		 r.reply AS reviewReply,
		 oi.order_item_id AS orderItemId,
		 oi.create_date AS orderItemCreateDate
		FROM orderItems oi 
		INNER JOIN orders o ON o.order_id =oi.order_id 
		INNER JOIN users u ON u.user_id =o.user_id
		INNER JOIN product p ON p.product_id =oi.product_id 
		LEFT OUTER JOIN file f ON p.product_id=f.reference_id AND f.reference_type='PRODUCT_IMG' AND f.use_yn='Y'
		LEFT OUTER JOIN review r ON r.order_item_id =oi.order_item_id 
		WHERE u.user_id = #{userId}
		AND oi.status=#{orderItemStatus}
        <choose>
            <when test="type == 'REVIEWABLE'">
                AND r.review_id IS NULL
            </when>
            <when test="type == 'REVIEWED'">
                AND r.review_id IS NOT NULL
            </when>
        </choose>
        <if test="orderItemId != null">
            AND oi.order_item_id <![CDATA[<]]> #{orderItemId}
        </if>
        ORDER BY oi.order_item_id DESC
        LIMIT #{limit}
    </select>
    <select id="selectOrderItemsByOrderId" parameterType="Int" resultType="com.portfolio.order.dto.OrderDto$OrderItemDto">
        SELECT
			order_item_id,
			order_id,
			product_id,
			quantity,
			price,
			status,
			create_date,
			modify_date
        FROM orderItems
        WHERE order_id=#{orderId}
    </select>
</mapper>